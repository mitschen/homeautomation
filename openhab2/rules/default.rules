//some global states
var DateTime userSwitchOff_Balkon = new DateTime(0)

rule "Vitrine"
when
  Item Vitrine433 received command
then
  if(receivedCommand == ON)  Remote_Send_Args.sendCommand("-d Funk2A -s on")
  else Remote_Send_Args.sendCommand("-d Funk2A -s off")

  Remote_Send.sendCommand(ON)

  // wait for the command to complete
  while(Remote_Send.state != ON) Thread::sleep(100)
  logInfo("Power_Plug", "Vitrine  "+Vitrine433.state + Remote_Send_Out.state)
end

rule "WohnzimmerGr"
when
  Item WohnzimmerGr received command
then
  if(receivedCommand == ON)  Remote_Send_Args.sendCommand("-d Funk1A -s on")
  else Remote_Send_Args.sendCommand("-d Funk1A -s off")

  Remote_Send.sendCommand(ON)
  while(Remote_Send.state != ON) Thread::sleep(100)
  logInfo("Power_Plug", "WohnzimmerGr  "+WohnzimmerGr.state + Remote_Send_Out.state)
end

rule "WohnzimmerKl"
when
  Item WohnzimmerKl received command
then
  if(receivedCommand == ON)  Remote_Send_Args.sendCommand("-d Funk3A -s on")
  else Remote_Send_Args.sendCommand("-d Funk3A -s off")

  Remote_Send.sendCommand(ON)
  while(Remote_Send.state != ON) Thread::sleep(100)
  logInfo("Power_Plug", "WohnzimmerKl  "+WohnzimmerKl.state + Remote_Send_Out.state)
end

rule "Weinregal"
when
  Item Weinregal received command
then
  if(receivedCommand == ON)  Remote_Send_Args.sendCommand("-d Funk1B -s on")
  else Remote_Send_Args.sendCommand("-d Funk1B -s off")

  Remote_Send.sendCommand(ON)
  while(Remote_Send.state != ON) Thread::sleep(100)
  logInfo("Power_Plug", "Weinregal  "+Weinregal.state + Remote_Send_Out.state)

end
rule "Balkon"
when
  Item Balkon received command
then
  val now = new DateTime(now.toString)
  if(receivedCommand == ON){
   Remote_Send_Args.sendCommand("-d Funk2B -s on")
   userSwitchOff_Balkon = now
  } else {
    Remote_Send_Args.sendCommand("-d Funk2B -s off")
    userSwitchOff_Balkon = now.plusHours(4)
    logInfo("Switch Balkon", "blocking period until"+userSwitchOff_Balkon)
  }

  Remote_Send.sendCommand(ON)
  while(Remote_Send.state != ON) Thread::sleep(100)
  logInfo("Power_Plug", "Balkon  "+Balkon.state + Remote_Send_Out.state)
end


//Switch on Balkon at sunset and 1h before sunrise
rule "sunrise-sunset"
when
 //Channel 'astro:sun:home:rise#event' triggered START 
 Time cron "8 * * * * ?"
then
 val hoursBeforeSunrise = 2
 val hoursAfterSunset = 3
 val now = new DateTime(now.toString)
 val sunrise = new DateTime(Sunrise_Time.state.toString)
 val sunset = new DateTime(Sunset_Time.state.toString)
 var switchOn = true

// switch on if now is between [sunrise-2:sunrise]
if(now > userSwitchOff_Balkon){
 if( (Balkon.state != ON) 
  && (sunrise < now.plusHours(hoursBeforeSunrise)) 
  && (now < sunrise) ) {
  logInfo("Switch Balkon", "on (sunrise) at "+ now.toString)
  switchOn = true
 // switch on if now is between [sunset: sunset+3]
 } else if ( (Balkon.state != ON) 
  && (sunset < now) 
  && (now < sunset.plusHours(hoursAfterSunset)) ){
  logInfo("Switch Balkon", " on (sunset) at "+ now.toString)
  switchOn = true
 //switch off between 
 } else if( Balkon.state != OFF) {
  logInfo("Switch Balkon", "off at "+now.toString)
  switchOn = false
 }
 if((switchOn == true) && (Balkon.state == OFF)){
  Balkon.sendCommand(ON)
 } else if(Balkon.state == ON){
  Balkon.sendCommand(OFF)
 }
}

//logInfo("Times Balkon", "\nnow="+now+"\nsunrise="+sunrise+"\nsunset="+sunset+"\nBlocking="+userSwitchOff_Balkon+"\nState="+Balkon.state)

end
